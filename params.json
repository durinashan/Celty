{"name":"Celty","tagline":"Dead simple, extensible, *nix BitTorrent tracker ","body":"# Celty\r\nDead simple, extensible, unix BitTorrent tracker.\r\n\r\n**NOTICE:** This project is still in development, it's not quite working yet.\r\n\r\n## Why Celty when there is `X`?\r\nFrom what I have experienced, all the other trackers, like [Chihaya](https://github.com/chihaya/chihaya) or [Ocelot](https://github.com/WhatCD/Ocelot) all have a plethora of dependencies, strange configuration, or just general lack of useful documentation. The attempt that Celty makes is to make this process dead simple. Celty is mostly self contained, and will work right out of the box.\r\n\r\n## Dependencies\r\nThe only thing you need is a fairly modern C++ compiler, CMake for building, and libev for the event loop.\r\n\r\n## Building\r\nTo build Celty, create the build directory, and run cmake from that. e.g:\r\n\r\n```\r\n$ git clone https://github.com/XAMPP/Celty.git celty\r\n$ mkdir celty-build\r\n$ cd !$\r\ncd celty-build\r\n$ cmake ../celty\r\n$ make\r\n```\r\n\r\nFor the most part the default options will be fine, but if you want to change anything, here is a list of available build options.\r\n\r\n##### `DAEMON_NAME`\r\n\ttype: string\r\n\tdefault: \"celty\"\r\n\r\nThe name of the daemon, it will be used on all the logs and other messages\r\n\r\n##### `DEFAULT_LOCKDIR`\r\n\ttype: path\r\n\tdefault: \"/var/lock/subsys\"\r\n\r\nThe location of the lock file for the daemonized process\r\n\r\n##### `DEFAULT_LOCKFILE`\r\n\ttype: string\r\n\tdefault: \"celty.lwk\"\r\n\r\nThe name of the lock file to use\r\n\r\n##### `DEFAULT_MODULEDIR`\r\n\ttype: string\r\n\tdefault: \"./\"\r\n\r\nThe location where celty looks for modules.\r\n\r\n##### `DEFAULT_MODULEEXT`\r\n\ttype: string\r\n\tdefault: \".moe\"\r\n\r\nThe extension of the module to load.\r\n\r\n**NOTE:** The `.` in the extension name is optional, in that case Celty will look for any filed that is suffixed with a matching string.\r\n\r\n**NOTE:** The any module following the standard build method in the `[modules](./modules)` directory will automatically be built with the given extension.\r\n\r\n##### `BUILD_MODULES`\r\n\ttype: boolean\r\n\tdefault: yes\r\n\r\nBuilds the modules along with Celty\r\n\r\n##### `DEFAULT_RUNAS`\r\n\ttype: string\r\n\tdefault \"nobody\"\r\n\r\nThe user to run the daemon as.\r\n\r\n##### `DEFAULT_WORKINGDIR`\r\n\ttype: string\r\n\tdefault: \"/\"\r\n\r\nThe working directory to use when running as a daemon.\r\n\r\n##### `CONFIG_DIRECTORY`\r\n\ttype: path\r\n\tdefault: \"/etc\"\r\n\r\nThe default directory that Celty will look for configuration files in.\r\n\r\n##### `CONFIG_FILE`\r\n\ttype: string\r\n\tdefault: \"celty.cfg\"\r\n\r\nThe default name of the configuration file that Celty will look for.\r\n\r\n##### `PID_FILE`\r\n\ttype: string\r\n\tdefault: \"/tmp/celty.pid\"\r\n\r\nThe location the Celty daemon writes a PID file for signaling.\r\n\r\n## Running\r\nTo run Celty, just run the build executable, it should fork of to a headless process as a daemon, or you can prevent it from daemonizing by passing the `--keep-head` option\r\n\r\nOnce Celty has forked off, you still might want to get stats or reload the configuration, this can be done using the `--sig` flag. E.G\r\n```\r\n$ ./celty\r\n[@] Celty daemonized to pid 12345\r\n$ ./celty --sig status\r\n[@] Running\r\n$ ./celty --sig reload\r\n[@] Reloading Configuration\r\n$ ./celty --sig halt\r\n[@] Stopping Celty....\r\n```\r\n\r\n## Configuring\r\nThe configuration is stored in a simple key-value list that allows the simple setting of options and values. For more information on this as well as documentation on all of the settings, see [CONFIGURATION.md](docs/CONFIGURATION.md)\r\n\r\n## Modules\r\nCelty for the most part is all self contained, but if you want to extend this functionality then modules are what you want.\r\n\r\n### For users\r\nModules are libraries that allow to Celty to do more than what comes out of the box.\r\n\r\nIf you want to install a module all you need to do is drop the module in the configured module directory and restart Celty. Or alternatively issue the `--sig reload` command.\r\n\r\n### For module developers\r\nThe module API is documented under [MODULES.md](docs/MODULES.md)\r\n\r\n\r\n![Celty](http://i.imgur.com/oKwH6Ho.gif)\r\n\r\n# License\r\nThis project is licensed under the MIT Open Source License, see [LICENSE.md](LICENSE.md) for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}